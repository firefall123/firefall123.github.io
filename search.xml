<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[markdown编写规范]]></title>
    <url>%2F2019%2F08%2F11%2Fmarkdown%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83%2F</url>
    <content type="text"><![CDATA[欢迎使用马克飞象 @(示例笔记本)[马克飞象|帮助|Markdown] 马克飞象是一款专为印象笔记（Evernote）打造的Markdown编辑器，通过精心的设计与技术实现，配合印象笔记强大的存储和同步功能，带来前所未有的书写体验。特点概述： 功能丰富 ：支持高亮代码块、LaTeX 公式、流程图，本地图片以及附件上传，甚至截图粘贴，工作学习好帮手； 得心应手 ：简洁高效的编辑器，提供[桌面客户端][1]以及[离线Chrome App][2]，支持移动端 Web； 深度整合 ：支持选择笔记本和添加标签，支持从印象笔记跳转编辑，轻松管理。 [TOC] Markdown简介 Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。 —— 维基百科 正如您在阅读的这份文档，它使用简单的符号标识不同的标题，将某些文字标记为粗体或者斜体，创建一个链接或一个脚注[^demo]。下面列举了几个高级功能，更多语法请按Ctrl + /查看帮助。 多行代码块12345678910@requires_authorizationdef somefunc(param1='', param2=0): '''A docstring''' if param1 &gt; param2: # interesting print 'Greater' return (param2 - param1 + 1) or Noneclass SomeClass: pass&gt;&gt;&gt; message = '''interpreter... prompt''' 单行代码块public LaTeX 公式可以创建行内公式，例如 $\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$。或者块级公式： $$ x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$ 列表1 列表2 a 字列表 b 字列表 列表3 插入图片 加粗加粗 斜体斜体 表格 Item Value Qty Computer 1600 USD 5 Phone 12 USD 12 Pipe 1 USD 234 流程图12345678st=&gt;start: Starte=&gt;endop=&gt;operation: My Operationcond=&gt;condition: Yes or No?st-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op 以及时序图: 123Alice-&gt;Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob--&gt;Alice: I am good thanks! 提示：想了解更多，请查看流程图[语法][3]以及时序图[语法][4]。 复选框使用 - [ ] 和 - [x] 语法可以创建复选框，实现 todo-list 等功能。例如： 已完成事项 待办事项1 待办事项2 注意：目前支持尚不完全，在印象笔记中勾选复选框是无效、不能同步的，所以必须在马克飞象中修改 Markdown 原文才可生效。下个版本将会全面支持。 印象笔记相关笔记本和标签马克飞象增加了@(笔记本)[标签A|标签B]语法, 以选择笔记本和添加标签。 绑定账号后， 输入(自动会出现笔记本列表，请从中选择。 笔记标题马克飞象会自动使用文档内出现的第一个标题作为笔记标题。例如本文，就是第一行的 欢迎使用马克飞象。 快捷编辑保存在印象笔记中的笔记，右上角会有一个红色的编辑按钮，点击后会回到马克飞象中打开并编辑该笔记。 注意：目前用户在印象笔记中单方面做的任何修改，马克飞象是无法自动感知和更新的。所以请务必回到马克飞象编辑。 数据同步马克飞象通过将Markdown原文以隐藏内容保存在笔记中的精妙设计，实现了对Markdown的存储和再次编辑。既解决了其他产品只是单向导出HTML的单薄，又规避了服务端存储Markdown带来的隐私安全问题。这样，服务端仅作为对印象笔记 API调用和数据转换之用。 隐私声明：用户所有的笔记数据，均保存在印象笔记中。马克飞象不存储用户的任何笔记数据。 离线存储马克飞象使用浏览器离线存储将内容实时保存在本地，不必担心网络断掉或浏览器崩溃。为了节省空间和避免冲突，已同步至印象笔记并且不再修改的笔记将删除部分本地缓存，不过依然可以随时通过文档管理打开。 注意：虽然浏览器存储大部分时候都比较可靠，但印象笔记作为专业云存储，更值得信赖。以防万一，请务必经常及时同步到印象笔记。 编辑器相关设置右侧系统菜单（快捷键Ctrl + M）的设置中，提供了界面字体、字号、自定义CSS、vim/emacs 键盘模式等高级选项。 快捷键帮助 Ctrl + /同步文档 Ctrl + S创建文档 Ctrl + Alt + N最大化编辑器 Ctrl + Enter预览文档 Ctrl + Alt + Enter文档管理 Ctrl + O系统菜单 Ctrl + M 加粗 Ctrl + B插入图片 Ctrl + G插入链接 Ctrl + L提升标题 Ctrl + H 关于收费马克飞象为新用户提供 10 天的试用期，试用期过后需要续费才能继续使用。未购买或者未及时续费，将不能同步新的笔记。之前保存过的笔记依然可以编辑。 反馈与建议 微博：@马克飞象@GGock 邮箱：&#104;&#117;&#x73;&#116;&#103;&#x6f;&#99;&#107;&#64;&#x67;&#109;&#97;&#x69;&#108;&#x2e;&#x63;&#x6f;&#x6d; 分割线 三个以上 感谢阅读这份帮助文档。请点击右上角，绑定印象笔记账号，开启全新的记录与分享体验吧。 [^demo]: 这是一个示例脚注。请查阅 MultiMarkdown 文档 关于脚注的说明。 限制： 印象笔记的笔记内容使用 [ENML][5] 格式，基于 HTML，但是不支持某些标签和属性，例如id，这就导致脚注和TOC无法正常点击。 12345]]></content>
      <categories>
        <category>Hexo编程资料</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[c#基础知识--10.Winform应用程序]]></title>
    <url>%2F2019%2F08%2F11%2Fc-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-10-Winform%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[1、winform应用程序是一种智能客户端技术，我们可以使用winform应用程序帮助我们获得信息或者传输信息等。 2、属性Name：在后台要获得前台的控件对象，需要使用Name属性。visible：指示一个控件是否可见。Enabled：指示一个控件是否可用。3、事件：发生一件事情。注册事件：双击控件注册的都是控件默认被选中的那个事件。触发事件:4、在Main函数当中创建的窗体对象，我们称之为这个窗体应用程序的主窗体。也就意味着，当你将主窗体关闭后，整个应用程序都关闭了。5、TextBox控件WordWrap:指示文本框是否换行。PasswordChar：让文本框显示一个单一的字符ScollBars：是否显示滚动条事件：TextChanged 当文本框中的内容发生改变的时候触发这个事件。6、Timer在指定的时间间隔内做一件指定的事情。7、简单记事儿本应用程序1)、在程序加载的时候，取消文本框的自动换行，以及让两个按钮和文本框隐藏2)、点击登陆，判断是否登陆成功3)、自动换行功能4)、保存文本到一个指定目录下。8、单选和多选checked：指示这个控件是否处于选中状态。默认情况下，在一个窗体中，所有的单选按钮只允许选中一个，可以使用groupbox进行分组。9、MDI窗体的设计1、首先确定一个父窗体。 将IsMdiContainer设置为true。2、创建子窗体，并且设置他们的父窗体。]]></content>
      <categories>
        <category>c#基础知识</category>
      </categories>
      <tags>
        <tag>winform</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[c#基础知识--9.面向对象多态]]></title>
    <url>%2F2019%2F08%2F11%2Fc-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-9-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%A4%9A%E6%80%81%2F</url>
    <content type="text"><![CDATA[1、绝对路径和相对路径绝对路径：通过给定的这个路径直接能在我的电脑中找到这个文件。相对路径：文件相对于应用程序的路径。 结论：我们在开发中应该去尽量的使用相对路径。2、装箱、拆箱装箱：就是将值类型转换为引用类型。拆箱：将引用类型转换为值类型。看两种类型是否发生了装箱或者拆箱，要看，这两种类型是否存在继承关系。3、将创建文件流对象的过程写在using当中，会自动的帮助我们释放流所占用的资源。4、实现多态的手段1)、虚方法步骤：1、将父类的方法标记为虚方法 ，使用关键字 virtual，这个函数可以被子类重新写一个遍。2)、抽象类当父类中的方法不知道如何去实现的时候，可以考虑将父类写成抽象类，将方法写成抽象方法。5、c#中的访问修饰符public :公开的公共的private：私有的，只能在当前类的内部访问protected：受保护的，只能在当前类的内部以及该类的子类中访问。internal：只能在当前项目中访问。在同一个项目中，internal和public的权限是一样。protected internal：protected+internal1)、能够修饰类的访问修饰符只有两个：public、internal。2)、可访问性不一致。子类的访问权限不能高于父类的访问权限，会暴漏父类的成员。6、设计模式设计这个项目的一种方式。7、简单工厂设计模式8、值类型在复制的时候，传递的是这个值得本身。 引用类型在复制的时候，传递的是对这个对象的引用。9、序列化：就是将对象转换为二进制 反序列化：就是将二进制转换为对象 作用：传输数据。 序列化： 1)、将这个类标记为可以被序列化的。10、partial部分类11、sealed密封类不能够被其他类继承，但是可以继承于其他类。12、接口[public] interface I..able{ 成员;}13接口接口是一种规范。只要一个类继承了一个接口，这个类就必须实现这个接口中所有的成员为了多态。接口不能被实例化。也就是说，接口不能new(不能创建对象)接口中的成员不能加“访问修饰符”，接口中的成员访问修饰符为public,不能修改。（默认为public）接口中的成员不能有任何实现（“光说不做”，只是定义了一组未实现的成员）。接口中只能有方法、属性、索引器、事件，不能有“字段”和构造函数。接口与接口之间可以继承，并且可以多继承。接口并不能去继承一个类，而类可以继承接口 （接口只能继承于接口，而类既可以继承接口，也可以继承类）实现接口的子类必须实现该接口的全部成员。一个类可以同时继承一个类并实现多个接口，如果一个子类同时继承了父类A，并实现了接口IA,那么语法上A必须写在IA的前面。class MyClass:A,IA{}，因为类是单继承的。显示实现接口的目的：解决方法的重名问题什么时候显示的去实现接口：当继承的借口中的方法和参数一摸一样的时候，要是用显示的实现接口当一个抽象类实现接口的时候，需要子类去实现接口。]]></content>
      <categories>
        <category>c#基础知识</category>
      </categories>
      <tags>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[c#基础知识--8.面向对象继承]]></title>
    <url>%2F2019%2F08%2F11%2Fc-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-8-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BB%A7%E6%89%BF%2F</url>
    <content type="text"><![CDATA[1、命名空间可以认为类是属于命名空间的。如果在当前项目中没有这个类的命名空间，需要我们手动的导入这个类所在的命名空间。 1)、用鼠标去点2)、alt+shift+F103)、记住命名空间，手动的去引用2、在一个项目中引用另一个项目的类1)、添加引用2)、引用命名空间3、值类型和引用类型区别：1、值类型和引用类型在内存上存储的地方不一样。2、在传递值类型和传递引用类型的时候，传递的方式不一样。值类型我们称之为值传递，引用类型我们称之为引用传递。我们学的值类型和引用类型：值类型：int、double、bool、char、decimal、struct、enum引用类型：string、自定义类、数组存储：值类型的值是存储在内存的栈当中。引用类型的值是存储在内存的堆中。3、字符串1)、字符串的不可变性当你给一个字符串重新赋值之后，老值并没有销毁，而是重新开辟一块空间存储新值。当程序结束后，GC扫描整个内存，如果发现有的空间没有被指向，则立即把它销毁。2)、我们可以讲字符串看做是char类型的一个只读数组。ToCharArray();将字符串转换为char数组new string(char[] chs):能够将char数组转换为字符串4、字符串提供的各种方法1)、Length：获得当前字符串中字符的个数2)、ToUpper():将字符转换成大写形式3)、ToLower():将字符串转换成小写形式4)、Equals(lessonTwo,StringComparison.OrdinalIgnoreCase):比较两个字符串，可以忽略大小写5)、Split()：分割字符串，返回字符串类型的数组。6)、Substring()：解决字符串。在截取的时候包含要截取的那个位置。7)、IndexOf():判断某个字符串在字符串中第一次出现的位置，如果没有返回-1、值类型和引用类型在内存上存储的地方不一样。8)、LastIndexOf()：判断某个字符串在字符串中最后一次出现的位置，如果没有同样返回-19)、StartsWith():判断以….开始10)、EndsWith():判断以…结束11)、Replace():将字符串中某个字符串替换成一个新的字符串12)、Contains():判断某个字符串是否包含指定的字符串13)、Trim():去掉字符串中前后的空格14)、TrimEnd()：去掉字符串中结尾的空格15)、TrimStart()：去掉字符串中前面的空格16)、string.IsNullOrEmpty():判断一个字符串是否为空或者为null17)、string.Join()：将数组按照指定的字符串连接，返回一个字符串。5、继承我们可能会在一些类中，写一些重复的成员，我们可以将这些重复的成员，单独的封装到一个类中，作为这些类的父类。Student、Teacher、Driver 子类 派生类Person 父类 基类子类继承了父类，那么子类从父类那里继承过来了什么？首先，子类继承了父类的属性和方法，但是子类并没有继承父类的私有字段。问题：子类有没有继承父类的构造函数？答：子类并没有继承父类的构造函数，但是。子类会默认的调用父类无参数的构造函数，创建父类对象，让子类可以使用父类中的成员。所以，如果在父类中重新写了一个有参数的构造函数之后，那个无参数的就被干掉了，子类就调用不到了，所以子类会报错。解决办法：1)、在父类中重新写一个无参数的构造函数。2)、在子类中显示的调用父类的构造函数，使用关键字:base()6、继承的特性1、继承的单根性：一个子类只能有一个父类。2、继承的传递性7、查看类图8、object是所有类的基类。9、new关键字1)、创建对象2)、隐藏从父类那里继承过来的同名成员。隐藏的后果就是子类调用不到父类的成员。 1、里氏转换1)、子类可以赋值给父类2)、如果父类中装的是子类对象，那么可以讲这个父类强转为子类对象。2、子类对象可以调用父类中的成员，但是父类对象永远都只能调用自己的成员。3、is：表示类型转换，如果能够转换成功，则返回一个true，否则返回一个falseas：表示类型转换，如果能够转换则返回对应的对象，否则返回一个null4、protected受保护的：可以在当前类的内部以及该类的子类中访问。5、ArrayList集合的长度问题每次集合中实际包含的元素个数(count)超过了可以包含的元素的个数(capcity)的时候，集合就会向内存中申请多开辟一倍的空间，来保证集合的长度一直够用。6、Hastable 键值对集合 字典 孙 sun—孙在键值对集合当中，我们是根据键去找值的。键值对对象[键]=值;*****:键值对集合当中，键必须是唯一的，而值是可以重复的7、foreach循环8、编码格式产生乱码的原因就是因为你保存这个文件的编码格式跟你打开这个文件的编码格式不一样。9、文本文件拖到txt文件中，还能看得懂的文件就是文本文件。]]></content>
      <categories>
        <category>c#基础知识</category>
      </categories>
      <tags>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[c#基础知识--7.面向对象初级]]></title>
    <url>%2F2019%2F08%2F11%2Fc-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-7-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%88%9D%E7%BA%A7%2F</url>
    <content type="text"><![CDATA[1、面向过程—–&gt; 面向对象面向过程：面向的是完成这件事儿的过程，强调的是完成这件事儿的动作。 把大象塞进冰箱里1、打开冰箱门2、把大象塞进去，亲下大象的屁股3、关闭冰箱门 如果我们用面向过程的思想来解决这件事儿，当执行这件事的人的不同的时候，我们需要为每个不同的人量身定做解决事情的方法。 面向对象：找个对象帮你做事儿。把大象塞进冰箱里我们把冰箱作为对象：1、冰箱门可以被打开2、大象可以被塞进冰箱里3、冰箱门可以被关闭 面向对象：意在写出一个通用的代码，屏蔽差异。 关门面向过程：关门张三 一脚把门踹紧了李四 轻轻的把门带上了王五 门没关严，留了个尾巴 面向对象：关门门可以被关闭 我在黑板上画了一个零星将 圆圈作为对象圆圈可以被画在黑板上 将 黑板作为对象黑板可以被画圆 我在黑板上画了一个圆张三上来的 哪尺子比这画了一个特别圆的圆李四上来的 随便一划拉王五上来了 圆规画了一个圆圆可以被画在黑板上圆圈可以被画在黑板上将圆圈作为对象：这个圆圈可以被画在黑板上。黑板可以被画圆黑板作为一个对象：可以被画圆圈 被画方块 被画正方向我们在代码中描述一个对象，通过描述这个对象的属性和方法对象必须是看得见摸得着的 灯：属性和方法属性：外形：长的亮度：500W颜色：白色牌子：XX方法：发光 电风扇：属性、方法外形：三个扇叶颜色：白色品牌：XX方法：转动，扇风 我们把这些具有相同属性和相同方法的对象进行进一步的封装，抽象出来 类这个概念。类就是个模子，确定了对象应该具有的属性和方法。对象是根据类创建出来的。类就是一个盖大楼的图纸 对象 就是盖出来的大楼。2、类语法：[public] class 类名{ 字段; 属性; 方法;}写好了一个类之后，我们需要创建这个类的对象，那么，我们管创建这个类的对象过程称之为类的实例化。使用关键字 new.this:表示当前这个类的对象。类是不占内存的，而对象是占内存的。3、属性属性的作用就是保护字段、对字段的赋值和取值进行限定。属性的本质就是两个方法，一个叫get()一个叫set()。既有get()也有set()我们诚之为可读可写属性。只有get()没有set()我们称之为只读属性没有get()只有set()我们称之为只写属性Field字段Method方法Property属性****字段就是女人 属性才是男人。4、访问修饰符public：公开的公共的，在哪都能访问。private：私有的，只能在当前类的内部进行访问，出了这个类就访问不到了。5、对象的初始化当我们创建好一个类的对象后，需要给这个对象的每个属性去赋值。我们管这个过程称之为对象的初始化。6、静态和非静态的区别1)、在非静态类中，既可以有实例成员，也可以有静态成员。2)、在调用实例成员的时候，需要使用对象名.实例成员; 在调用静态成员的时候，需要使用类名.静态成员名;总结：静态成员必须使用类名去调用，而实例成员使用对象名调用。 静态函数中，只能访问静态成员，不允许访问实例成员。 实例函数中，既可以使用静态成员，也可以使用实例成员。 静态类中只允许有静态成员，不允许出现实例成员。使用：1)、如果你想要你的类当做一个”工具类”去使用，这个时候可以考虑将类写成静态的。2)、静态类在整个项目中资源共享。只有在程序全部结束之后，静态类才会释放资源。堆 栈 静态存储区域释放资源。GC Garbage Collection垃圾回收器7、构造函数作用：帮助我们初始化对象(给对象的每个属性依次的赋值)构造函数是一个特殊的方法：1)、构造函数没有返回值，连void也不能写。2)、构造函数的名称必须跟类名一样。创建对象的时候会执行构造函数构造函数是可以有重载的。类当中会有一个默认的无参数的构造函数，当你写一个新的构造函数之后，不管是有参数的还是无参数的，那个默认的无参数的构造函数都被干掉了。8、new关键字Person zsPerson=new Person();new帮助我们做了3件事儿：1)、在内存中开辟一块空间2)、在开辟的空间中创建对象3)、调用对象的构造函数进行初始化对象9、this关键字1)、代表当前类的对象2)、在类当中显示的调用本类的构造函数 :this]]></content>
      <categories>
        <category>c#基础知识</category>
      </categories>
      <tags>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[c#基础知识--6.函数]]></title>
    <url>%2F2019%2F08%2F11%2Fc-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-6-%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[1、我们在Main()函数中，调用Test()函数，我们管Main()函数称之为调用者，管Test()函数称之为被调用者。 如果被调用者想要得到调用者的值：1)、传递参数。2)、使用静态字段来模拟全局变量。如果调用者想要得到被调用者的值：1)、返回值2、不管是实参还是形参，都是在内存中开辟了空间的。3、方法的功能一定要单一。GetMax(int n1,int n2)方法中最忌讳的就是出现提示用户输入的字眼。4、out、ref、params1)、out参数。如果你在一个方法中，返回多个相同类型的值的时候，可以考虑返回一个数组。但是，如果返回多个不同类型的值的时候，返回数组就不行了，那么这个时候，我们可以考虑使用out参数。out参数就侧重于在一个方法中可以返回多个不同类型的值。2)、ref参数能够将一个变量带入一个方法中进行改变，改变完成后，再讲改变后的值带出方法。ref参数要求在方法外必须为其赋值，而方法内可以不赋值。3)、params可变参数将实参列表中跟可变参数数组类型一致的元素都当做数组的元素去处理。params可变参数必须是形参列表中的最后一个元素。5、方法的重载概念：方法的重载指的就是方法的名称相同，但是参数不同。参数不同，分为两种情况1)、如果参数的个数相同，那么参数的类型就不能相同。2)、如果参数的类型相同，那么参数的个数就不能相同。***方法的重载跟返回值没有关系。]]></content>
      <categories>
        <category>c#基础知识</category>
      </categories>
      <tags>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[c#基础知识--5.复杂数据类型]]></title>
    <url>%2F2019%2F08%2F09%2Fc-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-5-%E5%A4%8D%E6%9D%82%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[1、变量类型int double string char bool decimal 变量的使用规则：先声明再赋值最后使用int number;number=10;number=20;Console.WriteLine(number);2、Camel Pascal3、运算符赋值运算符：=复合赋值运算符：+= -= = /= %= sum+=age; sum=sum+age;算数运算符： + - * / % ++ –关系运算符： &gt; &lt; &gt;= &lt;= == !=逻辑运算符： &amp;&amp; || !4、c#中的语法结构分支结构：if if-else选择结构：while do-while for5、常量声明的常量的语法：const 变量类型 变量名=值;什么时候会用到常量？6、枚举语法：[public] enum 枚举名{ 值1, 值2, 值3, ……..}public:访问修饰符。公开的公共的，哪都可以访问。enum：关键字，声明枚举的关键字枚举名：要符合Pascal命名规范将枚举声明到命名空间的下面，类的外面，表示这个命名空间下，所有的类都可以使用这个枚举。枚举就是一个变量类型 ，int–double string decimal.只是枚举声明、赋值、使用的方式跟那些普通的变量类型不一样。我们可以将一个枚举类型的变量跟int类型和string类型互相转换。枚举类型默认是跟int类型相互兼容的，所以可以通过强制类型转换的语法互相转换。当转换一个枚举中没有的值的时候，不会抛异常，而是直接将数字显示出来。枚举同样也可以跟string类型互相转换，如果将枚举类型转换成string类型，则直接调用ToString().如果将字符串转换成枚举类型则需要下面这样一行代码：(要转换的枚举类型)Enum.Parse(typeof(要转换的枚举类型),”要转换的字符串”);如果转换的字符串是数字，则就算枚举中没有，也会不会抛异常。如果转换的字符串是文本，如果枚举中没有，则会抛出异常。7、所有的类型都能够转换成string类型，调用ToString()。8、结构可以帮助我们一次性声明多个不同类型的变量。语法：[public] struct 结构名{ 成员;//字段}变量在程序运行期间只能存储一个值，而字段可以存储多个值。9、数组一次性存储多个相同类型的变量。语法：数组类型[] 数组名=new 数组类型[数组长度];数组的长度一旦固定了，就不能再被改变了10、冒泡排序：就是将一个数组中的元素按照从大到小或者从小到大的顺序进行排列。int[] nums={9,8,7,6,5,4,3,2,1,0}; 0 1 2 3 4 5 6 7 8 9第一趟比较：8 7 6 5 4 3 2 1 0 9 交换了9次 i=0 j=nums.Length-1-i第二趟比较：7 6 5 4 3 2 1 0 8 9 交换了8次 i=1 j=nums.Length-1-i第三趟比较：6 5 4 3 2 1 0 7 8 9 交换了7次 i=2 j=nums.Length-1-i第四趟比较：5 4 3 2 1 0 6 7 8 9 交换了6次 i=3 j=nums.Length-1-i第五趟比较：4 3 2 1 0 5 6 7 8 9 交换了5次第六趟比较：3 2 1 0 4 5 6 7 8 9 交换了4次第七趟比较：2 1 0 3 4 5 6 7 8 9 交换了3次第八趟比较：1 0 2 3 4 5 6 7 8 9 交换了2次第九趟比较：0 1 2 3 4 5 6 7 8 9 交换了1次for(int i=0;i&lt; number.Length-1;i++){ for(int j=0;j&lt; nums.Length-1-i;j++) { if(nums[j]&gt;nums[j+1]) { int temp=nums[j]; nums[j]=nums[j+1]; nums[j+1]=temp; } }}11、方法函数就是将一堆代码进行重用的一种机制。函数的语法：[public] static 返回值类型 方法名([参数列表]){ 方法体；}public:访问修饰符，公开的，公共的，哪都可以访问。static：静态的返回值类型：如果不需要写返回值，写void方法名：Pascal 每个单词的首字母都大些。其余字母小写参数列表：完成这个方法所必须要提供给这个方法的条件。如果没有参数，小括号也不能省略。方法写好后，如果想要被执行，必须要在Main()函数中调用。方法的调用语法：类名.方法名([参数]);在某些情况下，类名是可以省略的，如果你写的方法跟Main()函数同在一个类中，这个时候，类名可以省略。12、return1、在方法中返回要返回的值。2、立即结束本次方法。]]></content>
      <categories>
        <category>c#基础知识</category>
      </categories>
      <tags>
        <tag>数据</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[c#基础知识--4.流程控制]]></title>
    <url>%2F2019%2F08%2F09%2Fc-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-4-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%2F</url>
    <content type="text"><![CDATA[1、异常捕获我们在程序中经常会出现各种各样的异常，你如果想要你的程序变得坚强一些。在你的代码中应该经常性的使用try-catch来进行异常捕获。 哪行代码有可能出现异常，你就踹它一脚。语法：try{ 可能会出现异常的代码; …. … …}//try和catch之间不能有其他的代码catch{ 出现异常后要执行的代码;}执行过程:如果try中的代码没有出现异常，那么catch中的代码不会执行。如果try中的代码出现了异常，那怕这行出现异常的代码后面还有一百行都不会执行了，而是直接跳到catch中执行代码2、变量的作用域变量的作用域就是你能够使用到这个变量的范围。变量的作用域一般从声明它的那个括号开始到那个括号所对应的结束的括号结束。在这个范围内，我们可以访问并使用变量。超出这个范围就访问不到了3、switch-case用来处理多条件的定值的判断。语法：switch(变量或者表达式的值){ case 值1:要执行的代码; break; case 值2:要执行的代码; break; case 值3:要执行的代码; break; ………. default:要执行的代码; break;}执行过程：程序执行到switch处，首先将括号中变量或者表达式的值计算出来，然后拿着这个值依次跟每个case后面所带的值进行匹配，一旦匹配成功，则执行该case所带的代码，执行完成后，遇到break。跳出switch-case结构。如果，跟每个case所带的值都不匹配。就看当前这个switch-case结构中是否存在default，如果有default，则执行default中的语句，如果没有default，则该switch-case结构什么都不做。4、循环结构while循环：while(循环条件){ 循环体;}执行过程：程序运行到while处，首先判断while所带的小括号内的循环条件是否成立，如果成立的话，也就是返回一个true，则执行循环体，执行完一遍循环体后，再次回到循环条件进行判断，如果依然成立，则继续执行循环体，如果不成立，则跳出while循环。在while循环当中，一般总会有那么一行代码，能够改变循环条件，使之终有一天不再成立，如果没有那么一行代码能够改变循环条件，也就是循环条件永远都成立，我们称之这种循环叫做死循环。最简单的最常用的死循环：while(true){ }特点：先判断，再执行，有可能一遍循环都不执行。5、break1)、可以跳出switch-case结构。2)、可以跳出当前循环。break一般不单独的使用，而是跟着if判断一起使用，表示，当满足某些条件的时候，就不再循环了。6、do-while循环。语法：do{ 循环体;}while(循环条件);执行过程:程序首先会执行do中的循环体，执行完成后，去判断do-while循环的循环条件，如果成立，则继续执行do中的循环体，如果不成立，则跳出do-while循环。特点：先循环，再判断，最少执行一遍循环体。7、*程序调试1)、写完一段程序后，想看一下这段程序的执行过程。2)、当你写完这段程序后，发现，程序并没有按照你想象的样子去执行。调试方法：1)、F11逐语句调试(单步调试)2)、F10逐过程调试3)、断点调试8、for循环语法:for(表达式1;表达式2;表达式3){ 循环体;}表达式1一般为声明循环变量，记录循环的次数(int i=0;)表达式2一般为循环条件(i&lt;10)表达式3一般为改变循环条件的代码，使循环条件终有一天不再成立(i++)。执行过程：程序首先执行表达式1，声明了一个循环变量用来记录循环的次数，然后执行表达式2，判断循环条件是否成立，如果表达式2返回的结果为true，则执行循环体。当执行完循环体后，执行表达式3，然后执行表达式2继续判断循环条件是否成立，如果成立则继续执行循环体，如果不成立，则跳出for循环。9、int.TryParseint.parse尝试着将一个字符串转换成int类型。10、三元表达式语法:表达式1?表达式2:表达式3;表达式1一般为一个关系表达式。如果表达式1的值为true，那么表达式2的值就是整个三元表达式的值。如果表达式1的值为false，那么表达式3的值就是整个三元表达式的值。注意：表达式2的结果类型必须跟表达式3的结果类型一致，并且也要跟整个三元表达式的结果类型一致。]]></content>
      <categories>
        <category>c#基础知识</category>
      </categories>
      <tags>
        <tag>流程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[c#基础知识--3.运算符]]></title>
    <url>%2F2019%2F08%2F09%2Fc-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-3-%E8%BF%90%E7%AE%97%E7%AC%A6%2F</url>
    <content type="text"><![CDATA[1、类型如果相兼容的两个变量，可以使用自动类型转换或者强制类型转换，但是，如果两个类型的变量不兼容，比如 string与int或者string 与double，这个时候我们可以使用一个叫做Convert的转换工厂进行转换。 注意：使用Convert进行类型转换，也需要满足一个条件：面儿上必须要过的去。2、算数运算符++：分为前++和后++，不管是前++还是后++，最终的结果都是给这个变量加一。区别表现表达式当中，如果是前++，则先给这个变量自身加一，然后带着这个加一后的值去参与运算。如果是后++，则先拿原值参与运算，运算完成后，再讲这个变量自身加一。–：同上。3、对于加加或者减减这样只需要一个操作数就能完成的运算，我们称之为一元运算符。 / % 对于这些需要两个或以上才能完成运算的操作符，我们称之为二元运算符。一元运算符的优先级要高于而元运算符。如果在一个表达式当中，既有一元运算符，又有二元运算符，我们首先计算一元运算符。int number=10;int result=10 + ++number;4、关系运算符 &lt; &gt;= &lt;= == !=关系运算符是用来描述两个事物之间的关系由关系运算符连接的表达式称之为关系表达式。5、bool类型在c#中我们用bool类型来描述对或者错。bool类型的值只有两个 一个true 一个false6、逻辑运算符&amp;&amp; 逻辑与||逻辑或!逻辑非又逻辑运算符连接的表达式叫做逻辑表达式逻辑运算符两边放的一般都是关系表达式或者bool类型的值。5&gt;3 &amp;&amp;true3&gt;5||false！表达式逻辑表达式的结果同样也是bool类型7、复合赋值运算符int number=10; = :number+=20;number=number+20; -=number-=5;number=number-5;=number=5;number=number*5;/=%=顺序结构：程序从Main函数进入，从上到下一行一行的执行，不会落下任何一行。分支结构:if if-else选择结构：if else-if switch-case循环结构：while do-while for foreach8、if语句：语法：if(判断条件){ 要执行的代码;}判断条件：一般为关系表达式或者bool类型的值。执行过程：程序运行到if处，首先判断if所带的小括号中的判断条件，如果条件成立，也就是返回true，则执行if所带的大括号中的代码，如果判断条件不成立，也就是返回一个false。则跳过if结构，继续向下执行。if结构的特点：先判断，再执行，有可能一行代码都不执行用于一种情况的判断。9、if-else语法：if(判断条件){ 执行的代码;}else{ 执行的代码}执行过程：程序执行到if处，首先判断if所带的小括号中的判断条件是否成立，如果成立，也就是返回一个true，则执行if所带的大括号中的代码，执行完成后，跳出if-else结构。如果if所带的小括号中的判断条件不成立，也就是返回一个false，则跳过if语句，执行else所带的大括号中的语句，执行完成后，跳出if-else结构。if-else特点：先判断，再执行，最少都要执行一条代码。用于两种情况的判断注意：else永远跟离它最近的那个if配对10、if else-if作用：用来处理多条件的区间性的判断。语法：if(判断条件){ 要执行的代码;}else if(判断条件){ 要执行的代码;}else if(判断条件){ 要执行的代码;}else if(判断条件){ 要执行的代码;}……..else{ 要执行的代码;}执行过程；程序首先判断第一个if所带的小括号中的判断条件，如果条件成立，也就是返回一个true，则执行该if所带的大括号中的代码，执行完成后，立即跳出if else-if结构。如果第一个if所带的判断条件不成立，也就是返回一个false，则继续向下进行判断，依次的判断每一个if所带的判断条件，如果成立，就执行该if所带的大括号中的代码，如果不成立，则继续向下判断，如果每个if所带的判断条件都不成立，就看当前这个if else-if结构中是否存在else。如果有else的话，则执行else中所带的代码，如果没有else，则整个 if-else if神马都不做。else可以省略。11.Switchswitch-case语法:switch(表达式/变量){case 值1: 语句块1;break;case 值2: 语句块2;break;default:语句块3;break;}12.if-else if与switch的比较(S)相同点:都可以实现多分支结构不同点:if-else if:可以处理范围switch:一般 只能用于等值比较三者的区别：if有条件的执行一条语句if-else有条件的执行一条或另一条语句switch有条件的执行一组语句中的一条语句]]></content>
      <categories>
        <category>c#基础知识</category>
      </categories>
      <tags>
        <tag>运算符</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[c#基础知识--2.基础]]></title>
    <url>%2F2019%2F08%2F09%2Fc-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-2-c-%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[1、注释符1)、注销2)、解释2、c#的3种注释符1)、单行注释 //2)、多行注释 /要注释的内容/3)、文档注释 /// 多用来解释类或者方法3、变量用来在计算机当中存储数据。存储整数100数据类型：整数在内存中开辟的空间应该是整数类型 int存储变量的语法：变量类型 变量名;变量名=值;”=”号：在这并不表示等于的意思，而是赋值的意思，表示把等号右边的值赋值给等号左边的变量。声明并且给变量赋值的简写形式：变量类型 变量名=值;4、数据类型1)、整数类型：int 只能存储整数，不能存储小数。 int a=12)、小数类型：double 既能存储整数，也能存储小数，小数点后面的位数 15~16位。Double a=3.143)、金钱类型：decimal：用来存储金钱，值后面需要加上一个m. decimal a=5.5m4)、字符串类型:string,用来存储多个文本，也可以存储空，字符串类型的值需要被 双引号引来，这个双引号必须是英文半角状态下的双引号 string a=“元”5)、字符类型：char,用来存储单个字符，最多、最少只能有一个字符，不能存储空。字符类型的值需要用 单引号因起来。英文半角状态下的单引号。 Char a = ‘A’5、波浪线1)、如果你的代码中出现了红色的波浪线，意味着你的代码中出现了语法错误。2)、如果你的代码中出现了绿色的波浪线，说明你的代码语法并没有错误，只不过提示你有可能会出现错误，但是不一定会出现错误。警告线6、变量的使用规则如果你要是用变量的话，应该要先声明再赋值再使用。7、命名规则：****首先要保证的就是这个变量的名字要有意义。1 现阶段给变量起名字的时候都以字母开头2 后面可以跟任意“字母”、数字、下划线.注意:1）你起的变量名不要与c#系统中的关键字重复.关键字：2）在c#中,大小写是敏感的.3)同一个变量名不允许重复定义(先这么认为,不严谨)给变量起名字的时候要满足两个命名规范：1、Camel 骆驼命名规范。要求变量名首单词的首字母要小写，其余每个单词的首字母要大写。多用于给变量命名。2、Pascal 命名规范：要求每个单词的首字母都要大写，其余字母小写。多用于给类或者方法命名。8、赋值运算符=：表示赋值的意思，表示把等号右边的值，赋值给等号左边的变量。由等号连接的表达式称之为赋值表达式。注意:每个表达式我们都可以求解除一个定值，对于赋值表达式而言，等号左边的变量的值，就是整个赋值表达式的值。int number=10;9、+号的作用1)、连接：当+号两边有一边是字符串的时候，+号就起到连接的作用。2)、相加：两边是数字的时候10、占位符使用方法：先挖个坑，再填个坑。使用占位符需要注意的地方：1、你挖了几个坑，就应该填几个坑，如果你多填了，没效果。如果你少填了，抛异常。2、输出顺序：按照挖坑的顺序输出11、异常异常是指：语法上并没有任何错误，只不过在程序运行的期间，由于某些原因出现了问题，使程序不能再正常的运行。12、转义符转义符指的就是一个’&#39;+一个特殊的字符，组成了一个具有特殊意义的字符。\n:表示换行&quot;:表示一个英文半角的双引号\t:表示一个tab键的空格]]></content>
      <categories>
        <category>c#基础知识</category>
      </categories>
      <tags>
        <tag>学前</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[c#基础知识--1.学前入门]]></title>
    <url>%2F2019%2F08%2F09%2Fc-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86-1-%E5%AD%A6%E5%89%8D%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[1、.Net平台 .Net FrameWork框架.Net FrameWork框架提供了一个稳定的运行环境，；来保障我们.Net平台正常的运转 2、C#语言 c sharp编程语言，如果你想要计算机按照你说的去做，你必须说计算机能够听懂的语言。2000年 any time any place and on any device任何时间任何地点都能够让用户通过任何设备获取到用户想要的数据3、两种交互模式C/S:客户机（client）/服务器（server） 要求客户的电脑上必须要安装一个客户端：qq、360、快播等B/S:浏览器（browser）要求客户的电脑上只需要安装一个浏览器。4、IDE 集成开发环境（IDE，Integrated Development Environment ）IDE指的就是我们的开发工具,用于开发桌面应用程序、ASP.NET Web 应用程序、XML、WebService、移动应用程序SDK（软件开发工具包（缩写：SDK、外语全称：Software Development Kit））5、vs的学习1)、启动VSa、双击图标b、调出cmd，输入 devenu2)、解决方案、项目及类之间的关系解决方案：公司项目：部门类（一种数据结构，可以封装数据成员、方法成员和其他的类）：员工在视图里面找解决方案资源管理器3)、Program中的各个组成部分引用命名空间：京东—-》京东在线商城项目—》顾客类淘宝—-》淘宝在线商城项目—》顾客类高端霸气公司—-》老赵牛X项目—》顾客类4)、方法或者函数Main函数是我们程序的主入口，你写的代码如果想要被执行的话，必须写在Main函数当中。5)、.sln：解决方案文件，里面包含着整个解决方案的信息，可以双击运行。.csproj:项目文件，里面包含着这个项目的信息，可以双击运行。6、书写代码需要注意的地方：1、代码中出现的所有标点都是英文半角 shift键快速切换中文半角和英文半角shift+空格 切换全角/半角2、在c#代码中，每行代码的结束，我们都以分号结束，注意：这个分号也是英文半角的分号。3、Console.WriteLine(“要打印的内容”); Console.ReadKey(); 1)、暂停当前程序，等待用户按下任意键继续，按下的任意键将显示在我们的控制台当中7、运行程序的两种方式1、点击绿色的启动按钮2、使用快捷键F58、生成解决方案帮助我们排查语法错误。9.VS中的常用快捷键Ctrl+K+D:快速对齐代码Ctrl+Z:撤销Ctrl+S:保存(一定要经常保存！)Ctrl+J:快速弹出智能提示Shift+End 、Shift+HomeCtrl+K+C:注释所选代码Ctrl+K+U:取消对所选代码的注释F1：转到帮助文档折叠冗余代码：#Region 和#EndRegion10.注释三种注释方式第一种:单行注释 以//开头,后面的就是注释内容//单行注释第二种:多行注释 以 /开头 */结束 之间的是注释内容/ */多行注释第三种:文档注释 在方法或类的上一行输入 ///就会产生//////文档注释///]]></content>
      <categories>
        <category>c#基础知识</category>
      </categories>
      <tags>
        <tag>学前</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hello world]]></title>
    <url>%2F2019%2F08%2F09%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. hello worldCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>Hexo编程资料</category>
      </categories>
  </entry>
</search>
